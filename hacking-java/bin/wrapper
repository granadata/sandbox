#!/bin/sh
# Simple Java Wrapper Script
#
# Executes a Java main with standard class path settings.  It is intended to
# allow simple command scripts for Java programs which just need to pass in 
# the Java main class and command line arguments. 
#
# Invocation: 
#   wrapper <classname> [arguments ...]
#
# Environmental variables accepted by this script: 
#   JAVA_HOME - Java release directory
#   JVM_OPTIONS - Java VM options (e.g. -Xmx=256M)

# Find home. 
BIN=`dirname $0`
HOME=`cd $BIN/..; pwd`

# Find main Java class, which is by convention the first argument. 
CLASS=$1
shift 1
if [ -z CLASS ]; then
  echo "$0: Must include a class name to execute"
  exit 1
fi

# Add the build directory to the path head so it works on dev classes. 
CP="$HOME/build/java/classes"

# Add jars from all directories to class path.
for jar in $HOME/lib/*.jar
do
  CP="$CP:$jar"
done

# Add configuration directory to class path. 
CP=$CP:$RPHOME/conf

# Find Java.
if [ -z "$JAVA_HOME" ]; then
  JAVA=`which java`
else
  JAVA=$JAVA_HOME/bin/java
fi
if [ ! -x "$JAVA" ]; then
  echo "Cannot find java command.  Please set the JAVA_HOME environment"
  echo "variable or add java to the execution path."
  exit 1
fi

# Uncomment to debug.  This is a utility so we set suspend=y to stop the 
# process until a debugger connects. 
#JVMDEBUG_PORT=44000
#JVM_OPTIONS="${JVM_OPTIONS} -enableassertions -Xdebug -Xnoagent -Djava.compiler=none -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=$REPLICATOR_JVMDEBUG_PORT"

# Run the program. 
$JAVA -cp $CP $JVM_OPTIONS $CLASS $*
